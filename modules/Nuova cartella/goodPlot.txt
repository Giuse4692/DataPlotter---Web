import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO

def show_plotting_ui(df):
    """
    Mostra l'interfaccia utente per la creazione e personalizzazione dei grafici.
    Prende in input il DataFrame dallo stato della sessione.
    """
    st.header("Costruttore di Grafici")
    st.info("Usa la **Sidebar a sinistra** per mappare gli assi e personalizzare il grafico.")
    
    column_list = df.columns.tolist()
    
    # --- 1. Selezione Tipo di Grafico ---
    plot_type = st.selectbox(
        "Scegli il tipo di grafico",
        ["Linea 2D", "Scatter 2D", "Scatter 3D", "Linea 3D (Line)", "Superficie 3D (Mesh)"]
    )
    
    # --- 2. Mappatura Assi ---
    st.sidebar.header("2. Mappatura Assi")
    x_axis = st.sidebar.selectbox("Asse X", column_list, index=0, key="x_axis")
    y_axis = st.sidebar.selectbox("Asse Y", column_list, index=1 if len(column_list) > 1 else 0, key="y_axis")
    z_axis = None
    if "3D" in plot_type:
        z_axis = st.sidebar.selectbox("Asse Z", column_list, index=2 if len(column_list) > 2 else 0, key="z_axis")
    color_axis = st.sidebar.selectbox("Mappa Colore (opzionale)", [None] + column_list, key="color_axis")

    # --- 3. Personalizzazione ---
    st.sidebar.header("3. Personalizzazione")
    plot_title = st.sidebar.text_input("Titolo Grafico", f"{y_axis} vs {x_axis}")
    x_label = st.sidebar.text_input("Etichetta Asse X", x_axis)
    y_label = st.sidebar.text_input("Etichetta Asse Y", y_axis)
    z_label = "Z"
    if z_axis:
        z_label = st.sidebar.text_input("Etichetta Asse Z", z_axis)
    show_legend = st.sidebar.checkbox("Mostra Legenda", True)

    # --- 4. Generazione Grafico ---
    fig = None
    try:
        if plot_type == "Linea 2D":
            fig = px.line(df, x=x_axis, y=y_axis, color=color_axis, title=plot_title)
        elif plot_type == "Scatter 2D":
            fig = px.scatter(df, x=x_axis, y=y_axis, color=color_axis, title=plot_title)
        elif plot_type == "Scatter 3D":
            fig = px.scatter_3d(df, x=x_axis, y=y_axis, z=z_axis, color=color_axis, title=plot_title)
        elif plot_type == "Linea 3D (Line)":
            fig = px.line_3d(df, x=x_axis, y=y_axis, z=z_axis, color=color_axis, title=plot_title)
        elif plot_type == "Superficie 3D (Mesh)":
            fig = go.Figure(data=[go.Mesh3d(
                x=df[x_axis],
                y=df[y_axis],
                z=df[z_axis],
                opacity=0.7
            )])
            fig.add_trace(go.Scatter3d(
                x=df[x_axis],
                y=df[y_axis],
                z=df[z_axis],
                mode='markers',
                marker=dict(size=2, color='red'),
                name='Dati Originali'
            ))

        if fig:
            fig.update_layout(
                title=plot_title,
                xaxis_title=x_label,
                yaxis_title=y_label,
                showlegend=show_legend
            )
            if "3D" in plot_type:
                fig.update_layout(scene=dict(
                    xaxis_title=x_label,
                    yaxis_title=y_label,
                    zaxis_title=z_label
                ))

            st.plotly_chart(fig, use_container_width=True)

            # --- Download HTML ---
            st.subheader("Download grafico")
            html_bytes = fig.to_html(full_html=True).encode("utf-8")
            st.download_button(
                label="Scarica grafico interattivo (HTML)",
                data=html_bytes,
                file_name="grafico.html",
                mime="text/html"
            )

            st.caption("ℹ️ Puoi aprire l'HTML scaricato nel browser e interagire con il grafico come qui.")

    except Exception as e:
        st.error(f"Errore durante la creazione del grafico: {e}")
